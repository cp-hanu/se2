import java.util.ArrayList;import java.util.Random;import java.util.stream.Stream;/** * A class of bags whose entries are stored in a fixed-size array. */public final class ArrayBag<T> implements BagInterface<T> {    //STEP 1: DETERMINES THE DATA FIELDS       /**     * TO-DO: Declares the necessary attributes     * bag: T[]     * numberOfEntries: int     * DEFAULT_CAPACITY: int (30)     * MAX_CAPACITY: int (3000)     */    private int numberOfEntries;    private ArrayList<T> bagArray;    private static final int DEFAULT_CAPACITY = 30;    private static final int MAX_CAPACITY = 3000;    //STEP 2: IMPLEMENTS THE CONSTRUCTORS    /**     * TO-DO: Creates an empty bag with default capacity     */    public ArrayBag() throws Exception {        this(DEFAULT_CAPACITY);    }    /**     * TO-DO: Creates an empty bag having a given capacity.     *     * @param desiredCapacity The integer capacity desired.     */    public ArrayBag(int desiredCapacity) throws Exception {        if (desiredCapacity > MAX_CAPACITY) {            throw new Exception("Larger than max capacity");        }        this.numberOfEntries = desiredCapacity;    }    //STEP 3: IMPLEMENTS THE FUNCTIONS    /**     * TO-DO: Adds a new entry to this bag.     *     * @param newEntry The object to be added as a new entry.     * @return True if the addition is successful, or false if not.     */    public boolean add(T newEntry) {        if (numberOfEntries == MAX_CAPACITY) {            return false;        }        bagArray.add(newEntry);        numberOfEntries++;        return true;    }    /**     * TO-DO: Retrieves all entries that are in this bag.     *     * @return A newly allocated array of all the entries in this bag.     */    public T[] toArray() {        return (T[]) Stream.of(bagArray).toArray();    }    /**     * TO-DO: Sees whether this bag is empty.     *     * @return True if this bag is empty, or false if not.     */    public boolean isEmpty() {        return numberOfEntries == 0;    }    /**     * TO-DO: Gets the current number of entries in this bag.     *     * @return The integer number of entries currently in this bag.     */    public int getCurrentSize() {        return numberOfEntries;    }    /**     * TO-DO: Counts the number of times a given entry appears in this bag.     *     * @param anEntry The entry to be counted.     * @return The number of times anEntry appears in this bag.     */    public int getFrequencyOf(T anEntry) {        return (int) Stream.of(bagArray).filter(o -> o.equals(anEntry)).count();    }    /**     * TO-DO: Tests whether this bag contains a given entry.     *     * @param anEntry The entry to locate.     * @return True if this bag contains anEntry, or false otherwise.     */    public boolean contains(T anEntry) {        return bagArray.stream().anyMatch(o -> o.equals(anEntry));    }    /**     * TO-DO: Removes all entries from this bag.     */    public void clear() {        bagArray.clear();    }    /**     * TO-DO: Removes one unspecified entry from this bag, if possible.     *     * @return Either the removed entry, if the removal was successful, or null.     */    public T remove() {        if (numberOfEntries == 0) {            return null;        }        Random random = new Random();        var idx = random.nextInt(numberOfEntries);        return bagArray.remove(idx);    }    /**     * TO-DO: Removes one occurrence of a given entry from this bag.     *     * @param anEntry The entry to be removed.     * @return True if the removal was successful, or false if not.     */    public boolean remove(T anEntry) {        return bagArray.remove(anEntry);    }    // TO-DO: Returns true if the array bag is full, or false if not.    private boolean isArrayFull() {        return numberOfEntries == MAX_CAPACITY;    }    // TO-DO: Locates a given entry within the array bag.    // Returns the index of the entry, if located,    // or -1 otherwise.    // Precondition: checkInitialization has been called.    private int getIndexOf(T anEntry) {        for (int i = 0; i < numberOfEntries; i++) {            if (bagArray.get(i).equals(anEntry)) {                return i;            }        }        return -1;    }    // TO-DO: Removes and returns the entry at a given index within the array.    // If no such entry exists, returns null.    // Precondition: 0 <= givenIndex < numberOfEntries.    // Precondition: checkInitialization has been called.    private T removeEntry(int givenIndex) {        return bagArray.remove(givenIndex);    }}